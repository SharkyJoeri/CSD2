import simpleaudio as sa
import time

hihat = sa.WaveObject.from_wave_file("hihat.wav"),
snare  = sa.WaveObject.from_wave_file("snare.wav"),
kick  = sa.WaveObject.from_wave_file("kick.wav")

kick_event = {
    'instrumentname': "kick",
    'instrument': kick,
    'velocity': 100,
    'duration': 100
}

snare_event = {
    'instrumentname': "snare",
    'instrument': snare,
    'velocity': 100,
    'duration': 100
}

hihat_event = {
    'instrumentname': "hihat",
    'instrument': hihat,
    'velocity': 100,
    'duration': 100
}

#   variables & values
BPM                     = 160 
measures                = 4  
beats_16th              = 0
beats_16th_total        = 0 
beats_16th_left         = 0
beat_4th_duration       = 60 / BPM          # 1/4th  measure
beat_16th_duration      = 60 / BPM / 4      # 1/16th measure

# #   lists
# kick_list = []
# snare_list = []
# hihat_list = []
sequence = []

#   event to play sample
def handle_note_event(event):
    print(event['instrumentname'])
    event['instrument'].play()

#   user input
print("How many measures should the sequence consist of?")
measures = int(input())
beats_16th_total = measures * 16
print(measures, "measures or", beats_16th_total, "16th notes")


def createSequence(sequence):
    beats_16th = 0
    while (beats_16th < beats_16th_total):
        user_input = int(input())
        beats_16th = beats_16th + user_input
        beats_16th_left = beats_16th_total - beats_16th
        print(beats_16th_left, "16th notes left to use")

        # when to play sample
        sequence.append(1)
        
        add_zero_for = user_input - 1
    
        # 16th beats rest
        for j in range(add_zero_for):
            sequence.append(0)
    
    print(beats_16th_total)
    if (beats_16th > beats_16th_total):
        del sequence[(beats_16th_total + beats_16th_left)]

    print(sequence)

def playBack():
    time_zero = time.time()
    
    while True:
        now = time.time() - time_zero
        
        if(now >= beat_16th_duration):
            if sequence == 1:
                handle_note_event(kick)

        sequence.pop(0)
 
         
createSequence(sequence)
playBack()



# handle_note_event(kick_event)
# time.sleep(0.1)
# handle_note_event(snare_event)
# time.sleep(3)



